{"mappings":"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","sources":["src/scripts/main.js"],"sourcesContent":["'use strict';\n\n// Constants to handle sorting order, form validation, and cities\nconst ASCENDING = 'asc'; // Sorting order: ascending\nconst DESCENDING = 'desc'; // Sorting order: descending\nconst DATA_STATE = 'state'; // Data attribute for tracking sort state\nconst MIN_AGE = 18; // Minimum allowed age\nconst MAX_AGE = 90; // Maximum allowed age\nconst MIN_NAME_LENGTH = 4; // Minimum name length\nconst CITIES = [\n  // Available cities for employee selection\n  'Tokyo',\n  'Singapore',\n  'London',\n  'New York',\n  'Edinburgh',\n  'San Francisco',\n];\n\n// References to the table and table body for row manipulations\nconst table = document.body.firstElementChild;\nconst tableBody = table.tBodies[0];\n\n// Event listeners for table sorting, row selection, and cell editing\ntable.addEventListener('click', handleSort); // Sorting when header clicked\ntableBody.addEventListener('click', selectRow); // Selecting a row on click\n// Enabling inline editing on cell double click\ntableBody.addEventListener('dblclick', editCell);\n\ncreateForm(); // Call to create the dynamic employee form\n\n// Function to dynamically create the employee form and append it to the page\nfunction createForm() {\n  const form = document.createElement('form');\n\n  form.classList.add('new-employee-form'); // Add form class\n  form.setAttribute('id', 'dynamicForm');\n  form.setAttribute('action', '/submit');\n  form.setAttribute('method', 'post');\n\n  // Add Name field\n  const nameLabel = createLabel('Name: ', 'name');\n  const nameInput = createInput('name', 'text');\n\n  nameLabel.append(' ', nameInput);\n  form.append(nameLabel);\n\n  // Add Position field\n  const positionLabel = createLabel('Position: ', 'position');\n  const positionInput = createInput('position', 'text');\n\n  positionLabel.append(' ', positionInput);\n  form.append(positionLabel);\n\n  // Add Office (City) field\n  const selectLabel = createLabel('Office: ', '');\n  const officeSelect = createSelect(CITIES);\n\n  officeSelect.setAttribute('name', 'city');\n  officeSelect.setAttribute('data-qa', 'office');\n  selectLabel.append(officeSelect);\n  form.append(selectLabel);\n\n  // Add Age field\n  const ageLabel = createLabel('Age: ', 'age');\n  const ageInput = createInput('age', 'number');\n\n  ageLabel.append(ageInput);\n  form.append(ageLabel);\n\n  // Add Salary field\n  const salaryLabel = createLabel('Salary: ', 'salary');\n  const salaryInput = createInput('salary', 'number');\n\n  salaryLabel.append(salaryInput);\n  form.append(salaryLabel);\n\n  // Add Save Button\n  const saveButton = createSubButton('dynamicForm', 'Save to table');\n\n  saveButton.addEventListener('click', handleFormSubmit);\n  form.append(saveButton);\n\n  // Append form to the document body\n  document.body.append(form);\n}\n\n// Handles the form submission, validates data, and adds a new row to the table\nfunction handleFormSubmit(e) {\n  e.preventDefault(); // Prevent form's default behavior (refresh)\n\n  const form = document.getElementById('dynamicForm');\n  const nameValue = form.elements['name'].value;\n  const positionValue = form.elements['position'].value;\n  const selectedOffice = form.elements['city'].value;\n  const ageValue = Number(form.elements['age'].value);\n  const salaryValue = Number(form.elements['salary'].value);\n\n  // Form validation checks\n  if (!form.checkValidity()) {\n    showNotification('error', 'Please fill in all required fields.');\n\n    return;\n  }\n\n  if (nameValue.length < MIN_NAME_LENGTH) {\n    showNotification('error', 'Name must be at least 4 characters long.');\n\n    return;\n  }\n\n  if (ageValue < MIN_AGE || ageValue > MAX_AGE) {\n    showNotification('error', 'Age must be between 18 and 90.');\n\n    return;\n  }\n\n  // Create new employee row and add to table\n  const newEmployee = createNewEmployee(\n    nameValue,\n    positionValue,\n    selectedOffice,\n    ageValue,\n    salaryValue,\n  );\n\n  // Notify user of successful form submission\n  showNotification('success', 'Form submitted successfully!');\n  tableBody.append(newEmployee);\n\n  // Reset the form fields\n  form.reset();\n}\n\n// Creates a new employee row with the provided data\nfunction createNewEmployee(employeName, position, office, age, salary) {\n  const tableRow = document.createElement('tr');\n\n  // Format salary as currency\n  const formattedSalary = salary.toLocaleString('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  });\n\n  // Create an array of table data and loop through it\n  const tableData = [employeName, position, office, age, formattedSalary];\n\n  tableData.forEach((dataText) => {\n    const td = document.createElement('td');\n\n    td.innerText = dataText; // Insert each piece of data into the cell\n    tableRow.append(td);\n  });\n\n  return tableRow;\n}\n\n// Creates a label element with the provided text and data attribute\nfunction createLabel(text, data) {\n  const label = document.createElement('label');\n\n  label.setAttribute('data-qa', data);\n  label.innerHTML = `${text}&nbsp`; // Add a non-breaking space after the text\n\n  return label;\n}\n\n// Creates an input element with the provided name and type\nfunction createInput(inputName, InputType) {\n  const input = document.createElement('input');\n\n  input.setAttribute('name', inputName);\n  input.setAttribute('type', InputType);\n  input.setAttribute('required', ''); // Make the input field required\n\n  return input;\n}\n\n// Creates a select element with options\nfunction createSelect(options) {\n  const select = document.createElement('select');\n  select.setAttribute('required', ''); // Make the select field required\n\n  // Add city options to the select dropdown\n  options.forEach((city) => {\n    const option = document.createElement('option');\n\n    option.textContent = city;\n    option.value = city;\n    select.append(option);\n  });\n\n  return select;\n}\n\n// Creates a submit button for the form\nfunction createSubButton(formId, text) {\n  const button = document.createElement('button');\n  button.setAttribute('type', 'submit');\n  button.setAttribute('form', formId);\n  button.innerText = text;\n  return button;\n}\n\n// Handles sorting of the table when a header is clicked\nfunction handleSort(e) {\n  const clickedHeader = e.target;\n\n  if (clickedHeader.tagName !== 'TH') {\n    return; // Exit if the clicked element is not a table header\n  }\n\n  // Remove any sorting state from other columns\n  [...table.querySelectorAll('th')].forEach((header) => {\n    if (header !== clickedHeader) {\n      delete header.dataset[DATA_STATE];\n    }\n  });\n\n  const columnIndex = clickedHeader.cellIndex;\n  const currentState = clickedHeader.dataset[DATA_STATE] || DESCENDING;\n  const newState = currentState === ASCENDING ? DESCENDING : ASCENDING;\n\n  clickedHeader.dataset[DATA_STATE] = newState;\n\n  // Sort the rows based on the column index and new state\n  const sortedRows = getSortedRows(columnIndex, newState);\n\n  // Reorder rows in the table body\n  tableBody.append(...sortedRows);\n}\n\n/**\n * Handles the row selection logic for a table.\n * @param {Event} e - The event object from the click event.\n */\nfunction selectRow(e) {\n  const activedRow = document.querySelector('.active');\n  const clickedRow = e.target.closest('tr');\n\n  if (!clickedRow || !tableBody.contains(clickedRow)) {\n    return;\n  }\n\n  // Remove highlight from the previously selected row\n  if (activedRow) {\n    activedRow.removeAttribute('class');\n  }\n\n  // Add highlight to the clicked row\n  clickedRow.classList.add('active');\n}\n\n/**\n * Sorts table rows based on the given column index and order.\n * @param {number} columnIndex - The index of the column to sort by.\n * @param {string} order - The sorting order ('asc' or 'desc').\n * @returns {HTMLTableRowElement[]} - The sorted rows.\n */\nfunction getSortedRows(columnIndex, order) {\n  const rows = Array.from(tableBody.rows);\n\n  return rows.sort((rowA, rowB) => {\n    const cellA = rowA.cells[columnIndex].innerText.trim();\n    const cellB = rowB.cells[columnIndex].innerText.trim();\n\n    return order === ASCENDING\n      ? cellA.localeCompare(cellB, undefined, { numeric: true })\n      : cellB.localeCompare(cellA, undefined, { numeric: true });\n  });\n}\n\n// Function to show notifications on the screen\nfunction showNotification(type, message) {\n  const notification = document.createElement('div');\n  const span = document.createElement('span');\n  notification.setAttribute('data-qa', 'notification');\n\n  span.innerText = type === 'error' ? 'Error!' : 'Success!';\n  notification.classList.add('notification', type);\n  span.classList.add('title');\n  notification.append(span);\n  notification.append(message);\n\n  document.body.append(notification);\n\n  // Remove the notification after 5 seconds\n  setTimeout(() => {\n    notification.remove();\n  }, 5000);\n}\n\n// Handles inline editing of table cells when double-clicked\nfunction editCell(e) {\n  const existingInput = document.querySelector('.cell-input');\n\n  if (existingInput) {\n    finishEditing(existingInput); // Finish any ongoing editing\n  }\n\n  const cell = e.target;\n\n  if (cell.tagName !== 'TD') {\n    return; // Exit if the clicked element isn't a table cell\n  }\n\n  const originalValue = cell.textContent.trim();\n  const input = document.createElement('input');\n  input.classList.add('cell-input');\n  input.value = originalValue;\n  cell.innerHTML = '';\n  cell.appendChild(input);\n  input.focus();\n\n  // Save changes when losing focus or pressing Enter\n  input.addEventListener('blur', () => finishEditing(input));\n  input.addEventListener('keydown', (ev) => {\n    if (ev.key === 'Enter') finishEditing(input);\n  });\n\n  // Finalize the editing process\n  function finishEditing(currentInput) {\n    const newValue = currentInput.value.trim();\n    cell.innerText = newValue || originalValue;\n  }\n}\n"],"names":[],"version":3,"file":"index.f75de5e1.js.map","sourceRoot":"/__parcel_source_root/"}