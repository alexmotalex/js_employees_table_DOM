{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCIA,IA6BQ,EAQA,EACA,EAMA,EACA,EAoIc,EACd,EA/HA,EACA,EAQA,EACA,EAMA,EACA,EA+HiB,EACjB,EA1HA,EA1EF,EAAa,OACb,EAAa,QAeb,EAAQ,SAAS,IAAI,CAAC,iBAAiB,CACvC,EAAY,EAAM,OAAO,CAAC,EAAE,CA2IlC,SAAS,EAAY,CAAI,CAAE,CAAI,EAC7B,IAAM,EAAQ,SAAS,aAAa,CAAC,SAKrC,OAHA,EAAM,YAAY,CAAC,UAAW,GAC9B,EAAM,SAAS,CAAI,GAAO,MAAA,CAAL,EAAK,SAEnB,CACT,CAGA,SAAS,EAAY,CAAS,CAAE,CAAS,EACvC,IAAM,EAAQ,SAAS,aAAa,CAAC,SAMrC,OAJA,EAAM,YAAY,CAAC,OAAQ,GAC3B,EAAM,YAAY,CAAC,OAAQ,GAC3B,EAAM,YAAY,CAAC,WAAY,IAExB,CACT,CAoGA,SAAS,EAAiB,CAAI,CAAE,CAAO,EACrC,IAAM,EAAe,SAAS,aAAa,CAAC,OACtC,EAAO,SAAS,aAAa,CAAC,QAEpC,EAAa,YAAY,CAAC,UAAW,gBAErC,EAAK,SAAS,CAAG,AAAS,UAAT,EAAmB,SAAW,WAC/C,EAAa,SAAS,CAAC,GAAG,CAAC,eAAgB,GAC3C,EAAK,SAAS,CAAC,GAAG,CAAC,SACnB,EAAa,MAAM,CAAC,GACpB,EAAa,MAAM,CAAC,GAEpB,SAAS,IAAI,CAAC,MAAM,CAAC,GAGrB,WAAW,WACT,EAAa,MAAM,EACrB,EAAG,IACL,CAhRA,EAAM,gBAAgB,CAAC,QA0LvB,SAAoB,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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\n// Constants to handle sorting order, form validation, and cities\nvar ASCENDING = \"asc\"; // Sorting order: ascending\nvar DESCENDING = \"desc\"; // Sorting order: descending\nvar DATA_STATE = \"state\"; // Data attribute for tracking sort state\nvar MIN_AGE = 18; // Minimum allowed age\nvar MAX_AGE = 90; // Maximum allowed age\nvar MIN_NAME_LENGTH = 4; // Minimum name length\nvar CITIES = [\n    // Available cities for employee selection\n    \"Tokyo\",\n    \"Singapore\",\n    \"London\",\n    \"New York\",\n    \"Edinburgh\",\n    \"San Francisco\"\n];\n// References to the table and table body for row manipulations\nvar table = document.body.firstElementChild;\nvar tableBody = table.tBodies[0];\n// Event listeners for table sorting, row selection, and cell editing\ntable.addEventListener(\"click\", handleSort); // Sorting when header clicked\ntableBody.addEventListener(\"click\", selectRow); // Selecting a row on click\n// Enabling inline editing on cell double click\ntableBody.addEventListener(\"dblclick\", editCell);\ncreateForm(); // Call to create the dynamic employee form\n// Function to dynamically create the employee form and append it to the page\nfunction createForm() {\n    var form = document.createElement(\"form\");\n    form.classList.add(\"new-employee-form\"); // Add form class\n    form.setAttribute(\"id\", \"dynamicForm\");\n    form.setAttribute(\"action\", \"/submit\");\n    form.setAttribute(\"method\", \"post\");\n    // Add Name field\n    var nameLabel = createLabel(\"Name: \", \"name\");\n    var nameInput = createInput(\"name\", \"text\");\n    nameLabel.append(\" \", nameInput);\n    form.append(nameLabel);\n    // Add Position field\n    var positionLabel = createLabel(\"Position: \", \"position\");\n    var positionInput = createInput(\"position\", \"text\");\n    positionLabel.append(\" \", positionInput);\n    form.append(positionLabel);\n    // Add Office (City) field\n    var selectLabel = createLabel(\"Office: \", \"\");\n    var officeSelect = createSelect(CITIES);\n    officeSelect.setAttribute(\"name\", \"city\");\n    officeSelect.setAttribute(\"data-qa\", \"office\");\n    selectLabel.append(officeSelect);\n    form.append(selectLabel);\n    // Add Age field\n    var ageLabel = createLabel(\"Age: \", \"age\");\n    var ageInput = createInput(\"age\", \"number\");\n    ageLabel.append(ageInput);\n    form.append(ageLabel);\n    // Add Salary field\n    var salaryLabel = createLabel(\"Salary: \", \"salary\");\n    var salaryInput = createInput(\"salary\", \"number\");\n    salaryLabel.append(salaryInput);\n    form.append(salaryLabel);\n    // Add Save Button\n    var saveButton = createSubButton(\"dynamicForm\", \"Save to table\");\n    saveButton.addEventListener(\"click\", handleFormSubmit);\n    form.append(saveButton);\n    // Append form to the document body\n    document.body.append(form);\n}\n// Handles the form submission, validates data, and adds a new row to the table\nfunction handleFormSubmit(e) {\n    e.preventDefault(); // Prevent form's default behavior (refresh)\n    var form = document.getElementById(\"dynamicForm\");\n    var nameValue = form.elements[\"name\"].value;\n    var positionValue = form.elements[\"position\"].value;\n    var selectedOffice = form.elements[\"city\"].value;\n    var ageValue = Number(form.elements[\"age\"].value);\n    var salaryValue = Number(form.elements[\"salary\"].value);\n    // Form validation checks\n    if (!form.checkValidity()) {\n        showNotification(\"error\", \"Please fill in all required fields.\");\n        return;\n    }\n    if (nameValue.length < MIN_NAME_LENGTH) {\n        showNotification(\"error\", \"Name must be at least 4 characters long.\");\n        return;\n    }\n    if (ageValue < MIN_AGE || ageValue > MAX_AGE) {\n        showNotification(\"error\", \"Age must be between 18 and 90.\");\n        return;\n    }\n    // Create new employee row and add to table\n    var newEmployee = createNewEmployee(nameValue, positionValue, selectedOffice, ageValue, salaryValue);\n    // Notify user of successful form submission\n    showNotification(\"success\", \"Form submitted successfully!\");\n    tableBody.append(newEmployee);\n    // Reset the form fields\n    form.reset();\n}\n// Creates a new employee row with the provided data\nfunction createNewEmployee(employeName, position, office, age, salary) {\n    var tableRow = document.createElement(\"tr\");\n    // Format salary as currency\n    var formattedSalary = salary.toLocaleString(\"en-US\", {\n        style: \"currency\",\n        currency: \"USD\",\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0\n    });\n    // Create an array of table data and loop through it\n    var tableData = [\n        employeName,\n        position,\n        office,\n        age,\n        formattedSalary\n    ];\n    tableData.forEach(function(dataText) {\n        var td = document.createElement(\"td\");\n        td.innerText = dataText; // Insert each piece of data into the cell\n        tableRow.append(td);\n    });\n    return tableRow;\n}\n// Creates a label element with the provided text and data attribute\nfunction createLabel(text, data) {\n    var label = document.createElement(\"label\");\n    label.setAttribute(\"data-qa\", data);\n    label.innerHTML = \"\".concat(text, \"&nbsp\"); // Add a non-breaking space after the text\n    return label;\n}\n// Creates an input element with the provided name and type\nfunction createInput(inputName, InputType) {\n    var input = document.createElement(\"input\");\n    input.setAttribute(\"name\", inputName);\n    input.setAttribute(\"type\", InputType);\n    input.setAttribute(\"required\", \"\"); // Make the input field required\n    return input;\n}\n// Creates a select element with options\nfunction createSelect(options) {\n    var select = document.createElement(\"select\");\n    select.setAttribute(\"required\", \"\"); // Make the select field required\n    // Add city options to the select dropdown\n    options.forEach(function(city) {\n        var option = document.createElement(\"option\");\n        option.textContent = city;\n        option.value = city;\n        select.append(option);\n    });\n    return select;\n}\n// Creates a submit button for the form\nfunction createSubButton(formId, text) {\n    var button = document.createElement(\"button\");\n    button.setAttribute(\"type\", \"submit\");\n    button.setAttribute(\"form\", formId);\n    button.innerText = text;\n    return button;\n}\n// Handles sorting of the table when a header is clicked\nfunction handleSort(e) {\n    var // Reorder rows in the table body\n    _tableBody;\n    var clickedHeader = e.target;\n    if (clickedHeader.tagName !== \"TH\") return; // Exit if the clicked element is not a table header\n    // Remove any sorting state from other columns\n    _to_consumable_array(table.querySelectorAll(\"th\")).forEach(function(header) {\n        if (header !== clickedHeader) delete header.dataset[DATA_STATE];\n    });\n    var columnIndex = clickedHeader.cellIndex;\n    var currentState = clickedHeader.dataset[DATA_STATE] || DESCENDING;\n    var newState = currentState === ASCENDING ? DESCENDING : ASCENDING;\n    clickedHeader.dataset[DATA_STATE] = newState;\n    // Sort the rows based on the column index and new state\n    var sortedRows = getSortedRows(columnIndex, newState);\n    (_tableBody = tableBody).append.apply(_tableBody, _to_consumable_array(sortedRows));\n}\n/**\n * Handles the row selection logic for a table.\n * @param {Event} e - The event object from the click event.\n */ function selectRow(e) {\n    var activedRow = document.querySelector(\".active\");\n    var clickedRow = e.target.closest(\"tr\");\n    if (!clickedRow || !tableBody.contains(clickedRow)) return;\n    // Remove highlight from the previously selected row\n    if (activedRow) activedRow.removeAttribute(\"class\");\n    // Add highlight to the clicked row\n    clickedRow.classList.add(\"active\");\n}\n/**\n * Sorts table rows based on the given column index and order.\n * @param {number} columnIndex - The index of the column to sort by.\n * @param {string} order - The sorting order ('asc' or 'desc').\n * @returns {HTMLTableRowElement[]} - The sorted rows.\n */ function getSortedRows(columnIndex, order) {\n    var rows = Array.from(tableBody.rows);\n    return rows.sort(function(rowA, rowB) {\n        var cellA = rowA.cells[columnIndex].innerText.trim();\n        var cellB = rowB.cells[columnIndex].innerText.trim();\n        return order === ASCENDING ? cellA.localeCompare(cellB, undefined, {\n            numeric: true\n        }) : cellB.localeCompare(cellA, undefined, {\n            numeric: true\n        });\n    });\n}\n// Function to show notifications on the screen\nfunction showNotification(type, message) {\n    var notification = document.createElement(\"div\");\n    var span = document.createElement(\"span\");\n    notification.setAttribute(\"data-qa\", \"notification\");\n    span.innerText = type === \"error\" ? \"Error!\" : \"Success!\";\n    notification.classList.add(\"notification\", type);\n    span.classList.add(\"title\");\n    notification.append(span);\n    notification.append(message);\n    document.body.append(notification);\n    // Remove the notification after 5 seconds\n    setTimeout(function() {\n        notification.remove();\n    }, 5000);\n}\n// Handles inline editing of table cells when double-clicked\nfunction editCell(e) {\n    var existingInput = document.querySelector(\".cell-input\");\n    if (existingInput) finishEditing(existingInput); // Finish any ongoing editing\n    var cell = e.target;\n    if (cell.tagName !== \"TD\") return; // Exit if the clicked element isn't a table cell\n    var originalValue = cell.textContent.trim();\n    var input = document.createElement(\"input\");\n    input.classList.add(\"cell-input\");\n    input.value = originalValue;\n    cell.innerHTML = \"\";\n    cell.appendChild(input);\n    input.focus();\n    // Save changes when losing focus or pressing Enter\n    input.addEventListener(\"blur\", function() {\n        return finishEditing(input);\n    });\n    input.addEventListener(\"keydown\", function(ev) {\n        if (ev.key === \"Enter\") finishEditing(input);\n    });\n    // Finalize the editing process\n    function finishEditing(currentInput) {\n        var newValue = currentInput.value.trim();\n        cell.innerText = newValue || originalValue;\n    }\n}\n\n//# sourceMappingURL=index.3e4b6a9b.js.map\n","'use strict';\n\n// Constants to handle sorting order, form validation, and cities\nconst ASCENDING = 'asc'; // Sorting order: ascending\nconst DESCENDING = 'desc'; // Sorting order: descending\nconst DATA_STATE = 'state'; // Data attribute for tracking sort state\nconst MIN_AGE = 18; // Minimum allowed age\nconst MAX_AGE = 90; // Maximum allowed age\nconst MIN_NAME_LENGTH = 4; // Minimum name length\nconst CITIES = [\n  // Available cities for employee selection\n  'Tokyo',\n  'Singapore',\n  'London',\n  'New York',\n  'Edinburgh',\n  'San Francisco',\n];\n\n// References to the table and table body for row manipulations\nconst table = document.body.firstElementChild;\nconst tableBody = table.tBodies[0];\n\n// Event listeners for table sorting, row selection, and cell editing\ntable.addEventListener('click', handleSort); // Sorting when header clicked\ntableBody.addEventListener('click', selectRow); // Selecting a row on click\n// Enabling inline editing on cell double click\ntableBody.addEventListener('dblclick', editCell);\n\ncreateForm(); // Call to create the dynamic employee form\n\n// Function to dynamically create the employee form and append it to the page\nfunction createForm() {\n  const form = document.createElement('form');\n\n  form.classList.add('new-employee-form'); // Add form class\n  form.setAttribute('id', 'dynamicForm');\n  form.setAttribute('action', '/submit');\n  form.setAttribute('method', 'post');\n\n  // Add Name field\n  const nameLabel = createLabel('Name: ', 'name');\n  const nameInput = createInput('name', 'text');\n\n  nameLabel.append(' ', nameInput);\n  form.append(nameLabel);\n\n  // Add Position field\n  const positionLabel = createLabel('Position: ', 'position');\n  const positionInput = createInput('position', 'text');\n\n  positionLabel.append(' ', positionInput);\n  form.append(positionLabel);\n\n  // Add Office (City) field\n  const selectLabel = createLabel('Office: ', '');\n  const officeSelect = createSelect(CITIES);\n\n  officeSelect.setAttribute('name', 'city');\n  officeSelect.setAttribute('data-qa', 'office');\n  selectLabel.append(officeSelect);\n  form.append(selectLabel);\n\n  // Add Age field\n  const ageLabel = createLabel('Age: ', 'age');\n  const ageInput = createInput('age', 'number');\n\n  ageLabel.append(ageInput);\n  form.append(ageLabel);\n\n  // Add Salary field\n  const salaryLabel = createLabel('Salary: ', 'salary');\n  const salaryInput = createInput('salary', 'number');\n\n  salaryLabel.append(salaryInput);\n  form.append(salaryLabel);\n\n  // Add Save Button\n  const saveButton = createSubButton('dynamicForm', 'Save to table');\n\n  saveButton.addEventListener('click', handleFormSubmit);\n  form.append(saveButton);\n\n  // Append form to the document body\n  document.body.append(form);\n}\n\n// Handles the form submission, validates data, and adds a new row to the table\nfunction handleFormSubmit(e) {\n  e.preventDefault(); // Prevent form's default behavior (refresh)\n\n  const form = document.getElementById('dynamicForm');\n  const nameValue = form.elements['name'].value;\n  const positionValue = form.elements['position'].value;\n  const selectedOffice = form.elements['city'].value;\n  const ageValue = Number(form.elements['age'].value);\n  const salaryValue = Number(form.elements['salary'].value);\n\n  // Form validation checks\n  if (!form.checkValidity()) {\n    showNotification('error', 'Please fill in all required fields.');\n\n    return;\n  }\n\n  if (nameValue.length < MIN_NAME_LENGTH) {\n    showNotification('error', 'Name must be at least 4 characters long.');\n\n    return;\n  }\n\n  if (ageValue < MIN_AGE || ageValue > MAX_AGE) {\n    showNotification('error', 'Age must be between 18 and 90.');\n\n    return;\n  }\n\n  // Create new employee row and add to table\n  const newEmployee = createNewEmployee(\n    nameValue,\n    positionValue,\n    selectedOffice,\n    ageValue,\n    salaryValue,\n  );\n\n  // Notify user of successful form submission\n  showNotification('success', 'Form submitted successfully!');\n  tableBody.append(newEmployee);\n\n  // Reset the form fields\n  form.reset();\n}\n\n// Creates a new employee row with the provided data\nfunction createNewEmployee(employeName, position, office, age, salary) {\n  const tableRow = document.createElement('tr');\n\n  // Format salary as currency\n  const formattedSalary = salary.toLocaleString('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  });\n\n  // Create an array of table data and loop through it\n  const tableData = [employeName, position, office, age, formattedSalary];\n\n  tableData.forEach((dataText) => {\n    const td = document.createElement('td');\n\n    td.innerText = dataText; // Insert each piece of data into the cell\n    tableRow.append(td);\n  });\n\n  return tableRow;\n}\n\n// Creates a label element with the provided text and data attribute\nfunction createLabel(text, data) {\n  const label = document.createElement('label');\n\n  label.setAttribute('data-qa', data);\n  label.innerHTML = `${text}&nbsp`; // Add a non-breaking space after the text\n\n  return label;\n}\n\n// Creates an input element with the provided name and type\nfunction createInput(inputName, InputType) {\n  const input = document.createElement('input');\n\n  input.setAttribute('name', inputName);\n  input.setAttribute('type', InputType);\n  input.setAttribute('required', ''); // Make the input field required\n\n  return input;\n}\n\n// Creates a select element with options\nfunction createSelect(options) {\n  const select = document.createElement('select');\n\n  select.setAttribute('required', ''); // Make the select field required\n\n  // Add city options to the select dropdown\n  options.forEach((city) => {\n    const option = document.createElement('option');\n\n    option.textContent = city;\n    option.value = city;\n    select.append(option);\n  });\n\n  return select;\n}\n\n// Creates a submit button for the form\nfunction createSubButton(formId, text) {\n  const button = document.createElement('button');\n\n  button.setAttribute('type', 'submit');\n  button.setAttribute('form', formId);\n  button.innerText = text;\n\n  return button;\n}\n\n// Handles sorting of the table when a header is clicked\nfunction handleSort(e) {\n  const clickedHeader = e.target;\n\n  if (clickedHeader.tagName !== 'TH') {\n    return; // Exit if the clicked element is not a table header\n  }\n\n  // Remove any sorting state from other columns\n  [...table.querySelectorAll('th')].forEach((header) => {\n    if (header !== clickedHeader) {\n      delete header.dataset[DATA_STATE];\n    }\n  });\n\n  const columnIndex = clickedHeader.cellIndex;\n  const currentState = clickedHeader.dataset[DATA_STATE] || DESCENDING;\n  const newState = currentState === ASCENDING ? DESCENDING : ASCENDING;\n\n  clickedHeader.dataset[DATA_STATE] = newState;\n\n  // Sort the rows based on the column index and new state\n  const sortedRows = getSortedRows(columnIndex, newState);\n\n  // Reorder rows in the table body\n  tableBody.append(...sortedRows);\n}\n\n/**\n * Handles the row selection logic for a table.\n * @param {Event} e - The event object from the click event.\n */\nfunction selectRow(e) {\n  const activedRow = document.querySelector('.active');\n  const clickedRow = e.target.closest('tr');\n\n  if (!clickedRow || !tableBody.contains(clickedRow)) {\n    return;\n  }\n\n  // Remove highlight from the previously selected row\n  if (activedRow) {\n    activedRow.removeAttribute('class');\n  }\n\n  // Add highlight to the clicked row\n  clickedRow.classList.add('active');\n}\n\n/**\n * Sorts table rows based on the given column index and order.\n * @param {number} columnIndex - The index of the column to sort by.\n * @param {string} order - The sorting order ('asc' or 'desc').\n * @returns {HTMLTableRowElement[]} - The sorted rows.\n */\nfunction getSortedRows(columnIndex, order) {\n  const rows = Array.from(tableBody.rows);\n\n  return rows.sort((rowA, rowB) => {\n    const cellA = rowA.cells[columnIndex].innerText.trim();\n    const cellB = rowB.cells[columnIndex].innerText.trim();\n\n    return order === ASCENDING\n      ? cellA.localeCompare(cellB, undefined, { numeric: true })\n      : cellB.localeCompare(cellA, undefined, { numeric: true });\n  });\n}\n\n// Function to show notifications on the screen\nfunction showNotification(type, message) {\n  const notification = document.createElement('div');\n  const span = document.createElement('span');\n\n  notification.setAttribute('data-qa', 'notification');\n\n  span.innerText = type === 'error' ? 'Error!' : 'Success!';\n  notification.classList.add('notification', type);\n  span.classList.add('title');\n  notification.append(span);\n  notification.append(message);\n\n  document.body.append(notification);\n\n  // Remove the notification after 5 seconds\n  setTimeout(() => {\n    notification.remove();\n  }, 5000);\n}\n\n// Handles inline editing of table cells when double-clicked\nfunction editCell(e) {\n  const existingInput = document.querySelector('.cell-input');\n\n  if (existingInput) {\n    finishEditing(existingInput); // Finish any ongoing editing\n  }\n\n  const cell = e.target;\n\n  if (cell.tagName !== 'TD') {\n    return; // Exit if the clicked element isn't a table cell\n  }\n\n  const originalValue = cell.textContent.trim();\n  const input = document.createElement('input');\n\n  input.classList.add('cell-input');\n  input.value = originalValue;\n  cell.innerHTML = '';\n  cell.appendChild(input);\n  input.focus();\n\n  // Save changes when losing focus or pressing Enter\n  input.addEventListener('blur', () => finishEditing(input));\n\n  input.addEventListener('keydown', (ev) => {\n    if (ev.key === 'Enter') {\n      finishEditing(input);\n    }\n  });\n\n  // Finalize the editing process\n  function finishEditing(currentInput) {\n    const newValue = currentInput.value.trim();\n\n    cell.innerText = newValue || originalValue;\n  }\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","form","nameLabel","nameInput","positionLabel","positionInput","options","select","selectLabel","officeSelect","ageLabel","ageInput","salaryLabel","salaryInput","formId","button","saveButton","DESCENDING","DATA_STATE","table","document","body","firstElementChild","tableBody","tBodies","createLabel","text","data","label","createElement","setAttribute","innerHTML","concat","createInput","inputName","InputType","input","showNotification","type","message","notification","span","innerText","classList","add","append","setTimeout","remove","addEventListener","e","clickedHeader","target","tagName","querySelectorAll","forEach","header","dataset","columnIndex","cellIndex","newState","currentState","sortedRows","rows","sort","rowA","rowB","cellA","cells","trim","cellB","order","localeCompare","undefined","numeric","apply","activedRow","querySelector","clickedRow","closest","contains","removeAttribute","existingInput","finishEditing","cell","originalValue","textContent","value","appendChild","focus","ev","key","currentInput","newValue","city","option","preventDefault","tableRow","getElementById","nameValue","elements","positionValue","selectedOffice","ageValue","Number","salaryValue","checkValidity","newEmployee","tableData","salary","toLocaleString","style","currency","minimumFractionDigits","maximumFractionDigits","dataText","td","reset"],"version":3,"file":"index.3e4b6a9b.js.map"}